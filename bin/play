#!/usr/bin/env ruby -wKu
%w[rubygems optparse].each {|dep| require dep }

Version = 3
Directories = [
  '~/Downloads/News',
  '/Volumes/Drobo/Downloads',
  '/Volumes/Drobo/Cinema',
  '/Volumes/Drobo/Television',
  '/Volumes/Drobo/Badly Formatted/Cinema',
  '/Volumes/Drobo/Badly Formatted/Television'
]

options = Hash.new
OptionParser.new do |opts|
  opts.banner = "\
= `play` =
A small script to, well, play something!

== Usage ==
`play [options] /path/to/file`
`play [options] Show Name`
`play [options] Movie name`
"
  
  opts.on("-p", "--padding PADDING", Integer, "Adjust padding to centre video onscreen") do |p|
    options[:padding] = p
  end
  
  opts.on("-l", "--[no-]latest", "Attempt to automatically play the latest episode of a TV show") do |l|
    options[:latest] = l
  end
  
  opts.on_tail("--help", "Show this help") do
    puts opts
    exit
  end
  opts.on_tail("--version", "Show version") do
    puts "I'm play #{Version}!"
    exit
  end
end.parse!

query = ARGV.join(' ')
# print "Playing the first show matching '#{query}': "

media = Directories.map {|dir| 
  Dir[File.expand_path(dir) + '/**/*.mkv'].
    select {|file| file.include? query } . # Only include relevant results …
    select {|file| File.size(file) > 104_857_600 } . # … that are > 100mb …
    sort.reverse
} .flatten

if File.file? File.expand_path(query)
  f = File.expand_path(query)
elsif options[:latest]
  raise "Nothing found" if media.empty?
  f = media.first
else
  raise "Nothing found" if media.empty?
  media.each.with_index do |file, i|
    name = file.split(File::Separator)[-2..-1].join(File::Separator)
    puts "#{(i + 1).to_s.rjust(3, "0")}. #{name}"
  end
  
  print "Please select one: "
  f = media[STDIN.gets.chomp.to_i - 1]
end

args = ['mplayer-mt', f]
args += ['-vf', "expand=0:-#{options[:padding]}:0:0"] if options[:padding]
p args
system(*args)
