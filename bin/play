#!/usr/bin/ruby -Ku
($:.unshift File.expand_path(File.join( File.dirname(__FILE__), '..', 'lib' )) ).uniq!
%w[rubygems optparse play].each {|dep| require dep }

ConfigurationDirectory = File.expand_path '~/.play/'

Dir[File.join(ConfigurationDirectory, '**.rb')].each {|file| require file }
Play::Configuration.default ||= Play::Configuration.load File.join(ConfigurationDirectory, 'config.yaml') if File.exists? File.join(ConfigurationDirectory, 'config.yaml')

Banner = "\
@#=== `play`
It's awesome, and you know it.

Run `ri Play` for more information.

@#=-- Usage:
`play [options] ~/path/to/a/file`
`play [options] A Movie`
`play [options] A Show S04E10`
`play [options] A Show 4x10`

@#=-- Options:
"

options = Play::Configuration.new
OptionParser.new do |opts|
  opts.banner = Banner
  
  opts.on("-p", "--padding PADDING", Integer, "Adjust padding to centre video (all sides)") do |p|
    [:top, :left, :bottom, :right].each do |side|
      options[[:padding, side].join('_').intern] = p
    end
  end
  
  [:top, :left, :bottom, :right].each do |side|
    opts.on("-" + side.to_s, "--padding-#{side} PADDING", Integer, "Adjust padding to centre video (#{side} padding only)") do |p|
      options[[:padding, side].join('_').intern] = p
    end
  end
  
  opts.on("-L", "--[no-]latest", "Automatically play the latest available piece of media") do |l|
    options[:latest] = l
  end
  
  opts.on("-s", "--skip-to SPOT", Float, "Start at a specified position in playpack (in seconds)") do |s|
    options[:spot] = s
  end
  
  opts.on_tail("--help", "Show this help") do
    puts opts
    exit
  end
  opts.on_tail("--version", "Show version") do
    puts "I'm `play` version #{Play::Version}, configured to play media using `#{options[:player]}`!"
    exit
  end
end.parse!

# TODO: Abstract this out. This is hardcoded to support television shows'
# season and episode numbers, and a specific format for said numbers at that.
# That should really be configured in a ~/.play/*.rb file, for any media type.
query = ARGV.join(' ')
bits = query.match(/^(.*?)(?: (?:(?:S(\d+))?(?:E(\d+))?|(\d*)x(\d*)))?$/i)
query = bits[1]
season = (bits[2].nil? || bits[2].empty?) ? ((bits[4].nil? || bits[4].empty?) ? nil : bits[4]) : bits[2]
episode = (bits[3].nil? || bits[3].empty?) ? ((bits[5].nil? || bits[5].empty?) ? nil : bits[5]) : bits[3]

Play [query, season, episode], options
